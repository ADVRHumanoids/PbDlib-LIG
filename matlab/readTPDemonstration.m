function [Data0,p,VarNames,FrameNames] = readTPDemonstration(prefix)
% Martijn Zeestraten, 2015
% Matlab function to read the data generated by the TPDemonstration class. 

% The following is assumed about the data files:
% Data file: 
%    string format: prefix_data.txt 
%             size: nbVar x nbData
% Variable names file:
%    string format: prefix_VarNames.txt
%             size: 1 x nbVar
% Frame names file:
%    string format: prefix_TPNames.txt
%             size: 1 x nbTPs
% Task Parmameters file:
%    string format: prefix_TPNames.txt
%    Format:
%             <---- Data Points ---->
%              ^    [b11^T, b12^T, ..., b1p^T]
%              |    [A11  , A12  , ..., A1p  ]
%              |    [b21^T, b22^T, ..., b2p^T]
%             TPs   [A21  , A22  , ..., A2p  ]
%              |    [...  , ...  , ..., ...  ]
%              |    [bm1^T, bm2^T, ..., bmp^T]
%              v    [Am1  , Am2  , ..., Amp  ]
% Where p represents the number of datapoints nbData and 
% m the number of taskparameters nbTPs. When the file only
% contains one column of task parmeters. It is assumed that all datapoints
% where recorded using the same task parameters (i.e. p = 1).

        % Load Data:
		Data0       = dlmread([prefix, '_data.txt']);		
		VarNames    = readVarNames([prefix,'_VarNames.txt']);
		FrameNames  = readStrings([prefix,'_TPNames.txt']);
		rawTPs  = dlmread([prefix,'_TaskParameters.txt']);
	
        % Determine size:
        nbVars  = length(VarNames);
		nbTPs   = length(FrameNames);
		nbData  = length(Data0);		
        
        % Check if there is a unique TP for each datapoint
        if size(rawTPs,2)==0
            UniqueTP = 0;
        elseif size(rawTPs,2)==nbVars*nbData
            UniqueTP = 1;
        else
           error('The size of the TaskParameter data file [%i x %i] is not consistent with the number of datapoints and the number of variables',size(rawTPs,1) ,size(rawTPs,2));
        end
 
		
		% Load data and TPs:		
		for j = 1:nbTPs
			ind = 1+(nbVars+1)*(j-1);			
            
            if UniqueTP
                % Unique Task parameters for each datapoint:
                p(j).b = reshape(rawTPs(ind,:)',nbVars,nbData);
                p(j).A = reshape(rawTPs(1+ind:ind+nbVars,:),nbVars,nbVars,nbData);
				
                % Create Data in frame j
                p(j).Data = zeros(nbVars,nbData);
                for n = 1:1:nbData
                    p(j).Data(:,n) = p(j).A(:,:,n)\(Data0(:,n) - p(j).b(:,n));
                end		
            else
                % No Unique Task parameters for each datapoint:
                p(j).b = reshape(rawTPs(ind,:)',nbVars);
                p(j).A = reshape(rawTPs(1+ind:ind+nbVars,:),nbVars,nbVars);						
                
                % Create Data in frame j
                p(j).Data = p(j).A\(Data0 - repmat(p(j).b,1,nbData));
            end		
        end		

end

function names = readStrings(file)

fid = fopen(file);
names = {};
i=1;
while 1
	tmp = fgetl(fid);
	if ischar(tmp)
		names{i} = tmp;
		i=i+1;
		
	else
		break;
	end
end

fclose(fid);

end

function names = readVarNames(file)
	fid = fopen(file);
	names = {};
	rawnames = strsplit(fgetl(fid),' ');
	
	for i = 1:length(rawnames)
		if strcmp(rawnames(i),'')==0
			names{i} = rawnames{i};
			i = i+1;
		end	
	end
end